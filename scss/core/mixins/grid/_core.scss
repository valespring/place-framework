// Math
@use 'sass:math';
@use 'sass:list';
@use '~@place/core/config/grid' as grid-config;
@use '~@place/core/config/patterns' as patterns;
@use '~@place/core/config/vars' as vars;
@use '~@place/core/mixins/presentation' as presentation;
@use '~@place/core/functions' as functions;

// Mixin for clearing floats
@mixin clearfix() {
	&:before,
	&:after {
		content: '\0020';
		height: 0;
		display: block;
		overflow: hidden;
	}
	&:after {
		clear: both;
	}
}

@mixin clearfix-list {
	@at-root ul#{&} {
		// Mixins
		@include presentation.unstyled-list();

		// Style
		margin-block-start: 0;
	}
}

// Grid Row
@mixin grid-row($margin: grid-config.$base-margin) {
	
	& {
		// Style
		--grid-spacing: #{$margin};
		margin-inline: calc(var(--grid-spacing) * -1px);
	}

}

// Grid Columns
@mixin grid-column($float: inline-start) {
	display: inline;
	float: $float;
}

// Grid Padding
@mixin grid-item-padding($margin: grid-config.$base-margin) {
	padding-inline: calc(var(--grid-spacing) * 1px);
	
}

// Grid List Margin
@mixin grid-list-item-margin($margin: grid-config.$base-margin) {
	margin-block: calc(var(--grid-spacing) * 1px);
}

// Grid Widths
@mixin create-grid-widths($identifier, $columns) {
	$col-widths: ();

	@for $t from 1 through $columns {
		@for $p from 1 through $t {
			// Width
			$w: math.div($p, $t);

			// Class
			$grid-width-class: functions.template-class(
				patterns.$grid-width-pattern,
				$base: grid-config.$grid-column-identifier,
				$viewport: $identifier,
				$partial: $p,
				$total: $t
			);

			$grid-column-width-class: functions.template-class(
				patterns.$grid-column-width-pattern,
				$base: grid-config.$grid-column-identifier,
				$viewport: $identifier,
				$partial: $p,
				$total: $t
			);

			// Loop
			@if not list.index($col-widths, $w) {
				@if $p != $t {
					.#{$grid-width-class},
					.#{$grid-column-width-class} {
						width: percentage($w);
						@extend %#{$identifier}-#{$p}-#{$t} !optional;
						@extend %#{$identifier}-#{grid-config.$grid-flex-modifier}-#{$p}-#{$t} !optional;
					}

					@each $fraction, $value in grid-config.$quick-grid-widths {
						// Class
						$grid-quick-width-class: functions.template-class(
							patterns.$grid-quick-width-pattern,
							$base: grid-config.$grid-column-identifier,
							$viewport: $identifier,
							$total: $fraction
						);

						$grid-quick-column-width-class: functions.template-class(
							patterns.$grid-quick-column-width-pattern,
							$base: grid-config.$grid-column-identifier,
							$viewport: $identifier,
							$total: $fraction
						);

						@if $value == math.div($p, $t) {
							.#{$grid-quick-width-class},
							.#{$grid-quick-column-width-class} {
								@extend .#{$grid-width-class} !optional;
							}
						}
					}
				}
			}

			$col-widths: list.append($col-widths, $w, comma);
		}
	}
}