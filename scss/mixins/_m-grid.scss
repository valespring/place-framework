// Mixin for clearing floats

@mixin clearfix() {
    &:before,
    &:after {
        content: "\0020";
        height: 0;
        display: block;
        overflow: hidden;
    }
    &:after {
        clear: both;
    }
}

@mixin grid-list-clear {
    @at-root ul#{&} {
        @include unstyled-list();
    }
}

// Grid Row

@mixin grid-row($mar: $base-margin)    {

    // Variables
    $grid-margin: 1em * (($mar / 2) / $base-text-size);

    // Create
    margin-left: -#{$grid-margin};
    margin-right: -#{$grid-margin};
}

// Grid Columns

@mixin grid-column($float: left)  {
    display: inline;
    float: $float;
}
// Grid Padding

@mixin grid-padding($mar: $base-margin)   {
    
    // Variables
    $grid-margin: 1em * (($mar / 2) / $base-text-size);

    // Create
    padding-left: $grid-margin;
    padding-right: $grid-margin;
}

// Grid List Margin
@mixin grid-list-margin($mar: $base-margin) {
    // Variables
    $list-margin: (1em * (($mar / 2) / $base-text-size) * 2);

    margin-top: $list-margin;
}

@mixin grid-flex-row {
    flex-flow: row wrap;
    align-items: stretch;
    align-content: space-between;
}

@mixin grid-flex-item {
    box-flex: 0;
    flex-grow: 0;
    flex-shrink: 0;
    float:none;
}

@mixin grid-row-lte8 {
    // Variables
    $lt8-ltr-spacing: px(4);
    $lt8-word-spacing: px(6);

    // Style
    letter-spacing: -$lt8-ltr-spacing;
    word-spacing: -$lt8-word-spacing;
    text-rendering: optimizespeed;
}

@mixin grid-item-lte8 {
    display: inline-block;
    letter-spacing: normal;
    word-spacing: normal;
    vertical-align: top;
    text-rendering: auto;
}

@mixin create-grid-placeholders( $prefix, $columns, $margin ) {
    @include grid-display-placeholders( $prefix, $margin );
    @include grid-width-placeholders( $prefix, $columns);
}

@mixin grid-display-placeholders ( $prefix, $margin ) {

    %grid-column-item-#{$prefix} {
        @include grid-padding($margin);

        min-height: 1px;
    }

    %grid-list-margin-#{$prefix} {
        @include grid-list-margin();
    }

    %grid-list-clear-#{$prefix} {
        @include grid-list-clear();
    }

    %grid-flex-item-#{$prefix} {
        @include grid-flex-item();
    }

    %grid-flex-item-lte8-#{$prefix} {
        @include grid-item-lte8();
    }

    %grid-flex-item-combined-#{$prefix} {
        @extend %grid-flex-item-#{$prefix};
        @extend %flex-display-#{$prefix};
        @extend %flex-column-#{$prefix};
    }

    %flex-display-#{$prefix} {
        display: flex;
    }

    %flex-column-#{$prefix} {
        flex-direction: column;
    }

    %flex-grow-#{$prefix} {
        flex-grow: 1;
    }
}

@mixin grid-width-placeholders ( $prefix, $columns ) {
    $col-widths: ();

    @for $t from 1 through $columns {
        @for $p from 1 through $t {
            $w: ($p / $t);

            @if $grid-flex {
                %#{$prefix}-#{$grid-flex-suffix}-#{$p}of#{$t} {
                    flex-basis: $w * 100%;
                    max-width: $w * 100%;
                }
            }

            %#{$prefix}-#{$p}of#{$t} {
                width: $w * 100%;
            }
        }
    }
}

@mixin create-grid-flex-widths($row-class, $prefix, $columns) {
    $col-widths: ();

    @for $t from 1 through $columns {
        @for $p from 1 through $t {
            $w: ($p/$t);

            @if not index($col-widths, $w) {
                @if $p != $t {
                    @if $p == 1 {
                        @each $desc, $value in $quick-grid-map {
                            $fraction-suffix: $desc;

                            @if $value == $t {
                                [class*="#{$row-class}__#{$grid-flex-suffix}"] {
                                    > [class*="#{$prefix}-#{$p}of#{$t}"] {
                                        @extend %#{$prefix}-#{$grid-flex-suffix}-#{$p}of#{$t};
                                    }
                                }

                                .#{$grid-prefix}#{$prefix}__#{$grid-flex-suffix}--#{$fraction-suffix} {
                                    @each $selector in $descendant-selectors {
                                        > #{$selector} {
                                            @extend %#{$prefix}-#{$grid-flex-suffix}-#{$p}of#{$t};
                                        }
                                    }
                                }
                            }
                        }
                    } @else {
                        [class*="#{$row-class}__#{$grid-flex-suffix}"] > [class*="#{$prefix}-#{$p}of#{$t}"] {
                            @extend %#{$prefix}-#{$grid-flex-suffix}-#{$p}of#{$t};
                        }
                    }

                    $col-widths: append($col-widths, $w, comma);
                } @else {
                    [class*="#{$row-class}__#{$grid-flex-suffix}"] > [class*="#{$prefix}-full"] {
                        @extend %#{$prefix}-#{$grid-flex-suffix}-1of1;
                    }
                }
            }
        }
    }
}

@mixin create-grid-widths($prefix, $columns) {
    $col-widths: ();

    @for $t from 1 through $columns {
        @for $p from 1 through $t {
            $w: ($p/$t);

            @if not index($col-widths, $w) {
                @if $p != $t {
                    [class*="#{$prefix}-#{$p}of#{$t}"] {
                        @extend %#{$prefix}-#{$p}of#{$t};
                    }

                    $col-widths: append($col-widths, $w, comma);

                    @each $fraction, $value in $grid-widths {
                        @if $value == ($p/$t) {
                            [class*="#{$prefix}-#{$fraction}"] {
                                @extend [class*="#{$prefix}-#{$p}of#{$t}"];
                            }
                        }
                    }
                    
                } @else {
                    [class*="#{$prefix}-full"] {
                        @extend %#{$prefix}-1of1;
                    }
                }
            }
        }
    }
}

@mixin create-grid ( $grid-viewport-infix, $grid-columns: $total-columns, $grid-margin: $base-margin ) {
    $grid-row-class: "#{$grid-prefix}#{$grid-viewport-infix}-#{$grid-row-suffix}";
    $grid-column-class: "#{$grid-column-prefix}#{$grid-viewport-infix}";

    // Widths
    @include create-grid-widths( $grid-viewport-infix, $grid-columns );

    [class*="#{$grid-row-class}"] {
        @include clearfix();
        @include grid-list-clear();
    }

    // Row
    .#{$grid-row-class},
    .#{$grid-row-class}--ltr,
    .#{$grid-row-class}--rtl {
        @include grid-row($grid-margin);
    }

    // Column
    [class*="#{$grid-column-class}"] {
        @extend %grid-column-item-#{$grid-viewport-infix};
    }

    // Alignments
    .#{$grid-row-class} {
        &--rtl {
            > [class*="#{$grid-column-class}"] {
                @include grid-column(right);
            }
        }

        &,
        &--ltr {
            > [class*="#{$grid-column-class}"] {
                @include grid-column(left);
            }
        }
    }

    @if $grid-flex {
        // Create Widths
        @include create-grid-flex-widths( 
            $grid-row-class,
            $grid-viewport-infix, 
            $grid-columns 
        );

        // Flex Grow Helper Class
        .#{$grid-prefix}#{$grid-viewport-infix}-grow {
            @extend %flex-grow-#{$grid-viewport-infix};
        }

        // Display Flex
        [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"],
        [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] {
            @extend %flex-display-#{$grid-viewport-infix};
        }

        // Extend to descendants
        [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"] {
             @each $selector in $descendant-selectors {
                > #{$selector} {
                    @extend %flex-display-#{$grid-viewport-infix};
                }
            }
        }

        // Extend Row Clears
        [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"] {
            @extend [class*="#{$grid-row-class}"];
        }
        
        // Flex wrap all row variations
        [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"],
        [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] {
            @include grid-flex-row();
        }

        // If listing, display as row
        .#{$grid-row-class}__#{$grid-flex-suffix},
        [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"] {
            @include grid-row($grid-margin);
        }

        // Set the flex item base
        [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] > [class*="#{$grid-prefix}#{$grid-viewport-infix}"],
        [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] > [class*="#{$grid-column-class}"] {

            // Extend placeholder
            @extend %grid-flex-item-combined-#{$grid-viewport-infix};
        }

        // Invite Descendants To The Party
        // TODO: find out why classes aren't comma combined
        [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"] {
            @each $selector in $descendant-selectors {
                > #{$selector} {
                    // Extend
                    @extend %grid-column-item-#{$grid-viewport-infix};
                    @extend %grid-flex-item-combined-#{$grid-viewport-infix};
                    @extend %grid-list-margin-#{$grid-viewport-infix};


                    @each $selector in $descendant-selectors {
                        > #{$selector} {
                            @extend %flex-grow-#{$grid-viewport-infix};
                        }
                    }
                }
            }
        }

        // Fallbacks
        @if $grid-lte8 {
            // Default Fallback
            .lte8 {
                [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"],
                [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] {
                    @include grid-row-lte8();
                }

                [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] > [class*="#{$grid-column-class}"],
                [class*="#{$grid-row-class}__#{$grid-flex-suffix}"] > [class*="#{$grid-prefix}#{$grid-viewport-infix}"]{
                    @extend %grid-flex-item-lte8-#{$grid-viewport-infix};
                }

                [class*="#{$grid-prefix}#{$grid-viewport-infix}__#{$grid-flex-suffix}"] {
                    @each $selector in $descendant-selectors {
                        > #{$selector} {
                            @extend %grid-flex-item-lte8-#{$grid-viewport-infix};
                        }
                    }
                }
            }
        }

    }
}